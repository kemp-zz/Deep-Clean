name: Deep Clean
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  storage-cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y ncdu jq  # 新增 JSON 解析工具[3](@ref)

      - name: Rotate system logs
        run: |
          sudo journalctl --vacuum-time=7d
          sudo find /var/log -name "*.gz" -mtime +14 -exec rm -f {} \;
          echo "剩余日志空间: $(df -h /var/log | awk 'NR==2{print $4}')"

      - name: Purge Docker artifacts
        shell: bash
        env:
          DOCKER_CLEAN_FLAG: "aggressive"
        run: |
          sudo systemctl is-active docker || sudo systemctl start docker
          docker system prune -a --volumes --force
          sudo find /var/lib/docker/overlay2 -type f -name "*.tmp" -mtime +3 -delete

      - name: Kernel housekeeping
        continue-on-error: true
        run: |
          current_kernel=$(uname -r | sed 's/-generic//')
          echo "保留内核版本: $current_kernel"
          sudo apt purge -y $(dpkg -l | awk '/linux-image-[0-9]/{print $2}' | grep -v $current_kernel | head -n -2)

      - name: APT repository optimization
        run: |
          sudo apt autoremove --purge -y
          sudo apt clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Tempfile sanitation
        run: |
          sudo find /tmp -type f -mtime +7 -exec rm -f {} \;
          sudo find /var/tmp -name "*.un~" -delete


      
      - name: Android SDK Cleanup
        continue-on-error: true
        run: |
          echo "▂▂▂▂▂▂▂▂ Android SDK 深度清理 ▂▂▂▂▂▂▂▂"
          # 删除未使用的SDK组件（需预装Android命令行工具）[2,3](@ref)
          if [ -d "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" ]; then
            /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --uninstall \
              "build-tools;34.0.0" "platforms;android-33" \
              "system-images;android-30;google_apis;x86_64"
          fi
          
          # 清理缓存和临时文件[2](@ref)
          find /usr/local/lib/android/sdk -name "*.tmp" -mtime +7 -delete
          rm -rf /usr/local/lib/android/sdk/emulator/qemu/*.lock
          
          # 删除残留目录（保留最新两个版本）
          ls -dt /usr/local/lib/android/sdk/build-tools/* | tail -n +3 | xargs rm -rf

      - name: Third-party Toolchain Purge
        run: |
          echo "▂▂▂▂▂▂▂▂ 第三方工具链清理 ▂▂▂▂▂▂▂▂"
          # 清理 GitHub Hosted Toolcache[1,4](@ref)
          find /opt/hostedtoolcache -type d -name "1.2*" -mtime +30 -exec rm -rf {} +
          
          # 删除 Node.js 全局模块[6](@ref)
          npm list -g --depth=0 | awk -F ' ' '{print $2}' | grep -v 'npm@' | xargs npm uninstall -g
          
          # 清理 Python 虚拟环境残留
          find / -name ".venv" -type d -exec rm -rf {} +

      - name: PIP Ecosystem Sanitization
        run: |
          echo "▂▂▂▂▂▂▂▂ Python 环境清理 ▂▂▂▂▂▂▂▂"
          # 卸载所有用户安装的包[7](@ref)
          pip list --user --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs pip uninstall -y
          
          # 清除缓存和构建残留
          rm -rf ~/.cache/pip ~/.local/lib/python* ~/.pyenv/versions/*
          
          # 删除 .egg-info 和 __pycache__
          find / -type d -name "__pycache__" -exec rm -rf {} +
          find / -name "*.egg-info" -exec rm -rf {} +

      - name: APT Nuclear Cleanup
        run: |
          echo "▂▂▂▂▂▂▂▂ APT 原子级清理 ▂▂▂▂▂▂▂▂"
          # 彻底移除指定软件包[3,10](@ref)
          sudo dpkg -P google-cloud-sdk azure-cli \
            postgresql-12 openjdk-11-jdk \
            --force-depends
          
          # 清除配置文件残留
          sudo apt purge -y $(dpkg -l | grep '^rc' | awk '{print $2}')
          
          # 删除旧内核头文件（增强版）
          sudo dpkg -l 'linux-headers-*' | awk '/^ii/{print $2}' | \
            grep -v $(uname -r | sed 's/-generic//') | xargs sudo apt purge -y



         - name: Enhanced Storage Report
           run: |
             # 生成 JSON 报告（增加 --quiet 减少输出干扰）
             sudo ncdu -x --quiet -o storage.json /
    
             # 格式化解析并过滤错误
             echo "▂▂▂▂▂▂▂▂ 详细分析 ▂▂▂▂▂▂▂▂"
             jq -r '
               if type == "array" then
                 sort_by(.total_size) | reverse | .[0:5] | 
                 map({path: .name, size: (.total_size / (1024 * 1024) | floor)})
               else
                 "错误：JSON 格式不符合预期"
               end
             ' storage.json

          # 目录级深度分析（TOP10）[6](@ref)
          echo "▂▂▂▂▂▂▂▂ 最大目录 TOP10 ▂▂▂▂▂▂▂▂"
          sudo du -h --max-depth=2 / 2>/dev/null | sort -hr | head -10 | awk '
            BEGIN { print "路径                                   ➔ 占用空间" }
            { printf "%-40s ➔ \033[36m%8s\033[0m\n", $2, $1 }'

          # 生成 ncdu JSON 报告[3,5](@ref)
          sudo ncdu -x -o storage.json /
          echo "▂▂▂▂▂▂▂▂ 详细分析 ▂▂▂▂▂▂▂▂"
          jq '[.directories[] | {path: .name, size: (.total_size / (1024 * 1024) | floor)}] | sort_by(-.size) | .[0:5]' storage.json

          # 潜在可释放空间预测[1](@ref)
          echo "▂▂▂▂▂▂▂▂ 空间优化建议 ▂▂▂▂▂▂▂▂"
          docker_size=$(docker system df --format '{{.Size}}' | awk '/GB/ {sum+=$1} END {print sum"GB"}')
          journal_size=$(journalctl --disk-usage | awk '{print $7}')
          echo "潜在可释放空间: Docker(${docker_size}) + 日志(${journal_size}MB)"
